reset;
options solver cplex;
option cplex_options 'timing 1' 'timelimit=60';


#option log_file 'dynamic/solution.txt';



let areadoors[1] := 1..dr[1];
let areadoors[2] := dr[1]+1..dr[2];
let areadoors[3] := dr[2]+1..dr[3];
let areadoors[4] := dr[3]+1..dr[4];
let areadoors[5] := dr[4]+1..dr[5];
let areadoors[6] := dr[5]+1..dr[6];
let areadoors[7] := dr[6]+1..dr[7];

let{i in areadoors[1], h in hours} Vol2[1, i, h] := Vol[i,h];
let{i in areadoors[2], h in hours} Vol2[2, i, h] := Vol[i,h];
let{i in areadoors[3], h in hours} Vol2[3, i, h] := Vol[i,h];
let{i in areadoors[4], h in hours} Vol2[4, i, h] := Vol[i,h];
let{i in areadoors[5], h in hours} Vol2[5, i, h] := Vol[i,h];
let{i in areadoors[6], h in hours} Vol2[6, i, h] := Vol[i,h];
let{i in areadoors[7], h in hours} Vol2[7, i, h] := Vol[i,h];

param southfluid{hours};
param 123fluid{hours};
param 123zonal{hours};
param southassociates{hours};
param 123fluidassociates{hours};
param 123zonalassociates{hours};

for{h in hours}{


	for{a in areas}{
		let hour := h;
		let area := a;

		let numassociates[area,hour] := ceil(sum{i in areadoors[area]: Vol2[area, i, hour] > 0} Vol2[area, i, hour] / delta[area]);
		display h, a;

		solve;
		

		let{j in 1..numassociates[area, hour]} load[area, hour, j] := sum{i in areadoors[area]: Vol2[area, i, hour] > 0} Vol2[area, i, hour]*X[i,j];
		let{j in 1..numassociates[area,hour]} used[area, hour, j] := 0;	
		for{j in 1..numassociates[area,hour]} {
			if load[area, hour, j] > 0 then let used[area, hour, j] := 1;
		}
display load;
display used;
display X;
	}



let southfluid[hour] := (sum{j in 1..numassociates[1,hour]} load[1,hour,j] + sum{j in 1..numassociates[2,hour]} load[2,hour,j])/(sum{j in 1..numassociates[1,hour]} used[1,hour,j] + sum{j in 1..numassociates[2,hour]} used[2,hour,j]);


let 123fluid[hour] := (sum{j in 1..numassociates[4,hour]} load[4,hour,j] + sum{j in 1..numassociates[6,hour]} load[6,hour,j])/(sum{j in 1..numassociates[4,hour]} used[4,hour,j] + sum{j in 1..numassociates[6,hour]} used[6,hour,j]);


let 123zonal[hour] := (sum{j in 1..numassociates[3,hour]} load[3,hour,j] + sum{j in 1..numassociates[5,hour]} load[5,hour,j] + sum{j in 1..numassociates[7,hour]} load[7,hour,j])/
			(sum{j in 1..numassociates[3,hour]} used[3,hour,j] + sum{j in 1..numassociates[5,hour]} used[5,hour,j]+ sum{j in 1..numassociates[7,hour]} used[7,hour,j]);

let southassociates[hour] := (sum{j in 1..numassociates[1,hour]} used[1,hour,j] + sum{j in 1..numassociates[2,hour]} used[2,hour,j]);

let 123fluidassociates[hour] := (sum{j in 1..numassociates[4,hour]} used[4,hour,j] + sum{j in 1..numassociates[6,hour]} used[6,hour,j]);

let 123zonalassociates[hour] := (sum{j in 1..numassociates[3,hour]} used[3,hour,j] + sum{j in 1..numassociates[5,hour]} used[5,hour,j]+ sum{j in 1..numassociates[7,hour]} used[7,hour,j]);


display southfluid;
display 123fluid;
display 123zonal;
display southassociates;
display 123fluidassociates;
display 123zonalassociates;



}
#display numassociates;
#display Z, X;
#display _total_solve_elapsed_time;













